{"version":3,"sources":["js/creds.js","js/tok.js","js/index.js"],"names":["user","password","getTok","stuff","username","getIT","method","body","JSON","stringify","newTok","fetch","jsonTok","json","taken","token","module","hot","accept","Schedule","constructor","channel","stationID","getSchedule","curDate","Date","toISOString","today","substring","yesterDate","setDate","getDate","yesterday","tomDate","tomorrow","plusTwoDate","todayPlusTwo","plusThreeDate","todayPlusThree","stationData","date","scheduleOptions","headers","currToken","redirect","resSched","stationSchedule","todayArr","programs","tmwArr","plusTwoArr","plusThreeArr","fullArr","concat","todaySchedule","map","elem","id","programID","day","airDateTime","toLocaleDateString","undefined","weekday","month","time","toLocaleTimeString","hour","minute","todayIDs","data","options","res","jsonData","todayTitles","series","titles","title120","episode","episodeTitle150","ssn","hasOwnProperty","metadata","Gracenote","season","epNum","Object","keys","forEach","key","existtodayTitles","find","loading","document","querySelector","style","visibility","grid","getElementById","checkDate","i","length","markup","insertAdjacentHTML","popSched","detailMarkup","primetime","topPos","offsetTop","el","scrollTop","error","alerted","localStorage","getItem","alert","setItem","disc","ahc","apl","dam","dfc","idd","mtd","own","tlc","des","dsf","hgtv","cook","diy","food","trav","chanArr","then","result","e","catch","err","console","log"],"mappings":"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","file":"js.00a46daa.js","sourceRoot":"..","sourcesContent":["export const user = \"unclebillepg\";\nexport const password = \"526D1A95E3B6B19651774D1F90A68C32D758858F\";\n","import { user, password } from \"./creds.js\";\n\nasync function getTok() {\n  try {\n    const stuff = {\n      username: user,\n      password: password,\n    };\n\n    const getIT = {\n      method: \"POST\",\n      body: JSON.stringify(stuff),\n    };\n    const newTok = await fetch(\n      \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/token\",\n      getIT\n    );\n    const jsonTok = await newTok.json();\n    const taken = await jsonTok.token;\n    return taken;\n  } catch {}\n}\nexport default getTok();\n","import getTok from \"./tok.js\";\nif (module.hot) {\n  module.hot.accept();\n}\nexport default class Schedule {\n  constructor(channel, stationID) {\n    this.channel = channel;\n    this.stationID = stationID;\n  }\n\n  /** GET SCHEDULE */\n  async getSchedule() {\n    try {\n      /** DATES ***/\n      //TODAY//\n      const curDate = new Date().toISOString();\n      let today = curDate.substring(0, 10);\n\n      //YESTERDAY//\n      const yesterDate = new Date(curDate);\n      yesterDate.setDate(yesterDate.getDate() - 1);\n      let yesterday = yesterDate.toISOString();\n      yesterday = yesterday.substring(0, 10);\n\n      //TOMORROW//\n      const tomDate = new Date(curDate);\n      tomDate.setDate(tomDate.getDate() + 1);\n      let tomorrow = tomDate.toISOString();\n      tomorrow = tomorrow.substring(0, 10);\n\n      const plusTwoDate = new Date(curDate);\n      plusTwoDate.setDate(plusTwoDate.getDate() + 2);\n      let todayPlusTwo = plusTwoDate.toISOString();\n      todayPlusTwo = todayPlusTwo.substring(0, 10);\n\n      const plusThreeDate = new Date(curDate);\n      plusThreeDate.setDate(plusThreeDate.getDate() + 3);\n      let todayPlusThree = plusThreeDate.toISOString();\n      todayPlusThree = todayPlusThree.substring(0, 10);\n\n      //Station Data and Date to send to API\n      const stationData = [\n        {\n          stationID: `${this.stationID}`,\n          date: [today, tomorrow, todayPlusTwo, todayPlusThree],\n        },\n      ];\n\n      //options to include with API fetch\n      const scheduleOptions = {\n        method: \"POST\",\n        body: JSON.stringify(stationData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n\n      //Schedule fetch\n      const resSched = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/schedules\",\n        scheduleOptions\n      );\n      const stationSchedule = await resSched.json();\n      const todayArr = await stationSchedule[0].programs;\n      const tmwArr = await stationSchedule[1].programs;\n      const plusTwoArr = await stationSchedule[2].programs;\n      const plusThreeArr = await stationSchedule[3].programs;\n\n      //Combine each day to one array\n      const fullArr = todayArr.concat(tmwArr, plusTwoArr, plusThreeArr);\n\n      //Get program IDs and map to air times\n      const todaySchedule = await fullArr.map(function (elem) {\n        return {\n          id: elem.programID,\n          day: new Date(elem.airDateTime).toLocaleDateString(undefined, {\n            weekday: \"short\",\n            day: \"2-digit\",\n            month: \"2-digit\",\n            // year: 'numeric'\n          }),\n          time: new Date(elem.airDateTime).toLocaleTimeString(\"en-US\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n        };\n      });\n\n      /*** GET TITLES ***/\n      // Get program IDs and pass to new fetch to get Title info (Series, Ep, Season, Ep Num)\n      let todayIDs = await todaySchedule.map(function (id) {\n        return id[\"id\"];\n      });\n      let data = todayIDs;\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n      const res = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/programs\",\n        options\n      );\n\n      const jsonData = await res.json();\n\n      //Map Title to digestable array\n      const todayTitles = jsonData.map(function (elem) {\n        return {\n          id: elem.programID,\n          series: elem.titles[0].title120,\n          episode: elem.episodeTitle150\n            ? elem.episodeTitle150\n            : elem.titles[0].title120, // if no episode title just use series //\n          ssn:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Season ${elem.metadata[0].Gracenote.season}`\n              : `Season N/A`,\n          epNum:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Ep ${elem.metadata[0].Gracenote.episode}`\n              : `Ep N/A`,\n        };\n      });\n\n      /*** MATCH IDS ***/\n\n      // Combine Schedules (ID, Times) with Corresponding Titles based on same ID\n      Object.keys(todaySchedule).forEach((key) => {\n        let existtodayTitles = todayTitles.find(\n          ({ id }) => todaySchedule[key].id === id\n        );\n        if (existtodayTitles) {\n          (todaySchedule[key].series = existtodayTitles.series),\n            (todaySchedule[key].episode = existtodayTitles.episode),\n            (todaySchedule[key].ssn = existtodayTitles.ssn),\n            (todaySchedule[key].epNum = existtodayTitles.epNum);\n        }\n      });\n\n      /*** LOADER ***/\n\n      //Hide loader once schedules are ready\n      let loading = document.querySelector(`#${this.channel}--epg .spinner`);\n      loading.style.visibility = \"hidden\";\n\n      /*** RENDER SCHEDULE ***/\n\n      const grid = document.getElementById(`${this.channel}--epg`);\n      const checkDate = new Date().toLocaleDateString(undefined, {\n        weekday: \"short\",\n        day: \"2-digit\",\n        month: \"2-digit\",\n      });\n\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const markup = `  \n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"cell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p></div>                         `;\n\n        grid.insertAdjacentHTML(\"beforeend\", markup);\n      }\n      const popSched = document.getElementById(`${this.channel}--popup`);\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const detailMarkup = `\n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"big--${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"bigCell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p><p class=\"tmsid\">${todaySchedule[i].ssn} ${todaySchedule[i].epNum} - ${todaySchedule[i].id}</p></div> `;\n        popSched.insertAdjacentHTML(\"beforeend\", detailMarkup);\n      }\n      const primetime = document.getElementById(\n        `${this.channel}--${checkDate}--07:00 PM`\n      );\n      // Make grids align to 7:00PM of current day (8:00PM visually)\n      const topPos = primetime.offsetTop;\n      todaySchedule.forEach(\n        (el) =>\n          (document.getElementById(`${this.channel}--epg`).scrollTop =\n            topPos + 18)\n      );\n    } catch (error) {\n      let alerted = localStorage.getItem(\"alerted\") || \"\";\n      if (alerted != \"yes\") {\n        alert(\n          `We're having trouble retrieving schedules. If schedules fail to load, please try again later.`\n        );\n        localStorage.setItem(\"alerted\", \"yes\");\n      }\n    }\n  }\n}\n\n//** CHANNELS ***/\nconst disc = new Schedule(\"disc\", \"56905\");\nconst ahc = new Schedule(\"ahc\", \"18284\");\nconst apl = new Schedule(\"apl\", \"57394\");\nconst dam = new Schedule(\"dam\", \"60468\");\nconst dfc = new Schedule(\"dfc\", \"16618\");\nconst idd = new Schedule(\"idd\", \"16615\");\nconst mtd = new Schedule(\"mtd\", \"31046\");\nconst own = new Schedule(\"own\", \"70388\");\nconst tlc = new Schedule(\"tlc\", \"57391\");\nconst des = new Schedule(\"des\", \"19247\");\nconst dsf = new Schedule(\"dsf\", \"58428\");\nconst hgtv = new Schedule(\"hgtv\", \"49788\");\nconst cook = new Schedule(\"cook\", \"68065\");\nconst diy = new Schedule(\"diy\", \"67375\");\nconst food = new Schedule(\"food\", \"50747\");\nconst trav = new Schedule(\"trav\", \"59303\");\n\nlet chanArr = [\n  disc,\n  ahc,\n  apl,\n  dam,\n  dfc,\n  idd,\n  mtd,\n  own,\n  tlc,\n  des,\n  dsf,\n  hgtv,\n  cook,\n  diy,\n  food,\n  trav,\n];\n\n// Get token, test, fetch schedules\nlet currToken = getTok\n  .then((result) => {\n    currToken = result;\n    if (currToken !== undefined) {\n      chanArr.forEach(function (e) {\n        e.getSchedule();\n      });\n    } else {\n      alert(`Unable to retrieve schedules. Please try again later.`);\n    }\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n"]}