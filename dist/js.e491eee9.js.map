{"version":3,"sources":["src/js/creds.js","src/js/tok.js","src/js/index.js"],"names":["user","password","getTok","stuff","username","getIT","method","body","JSON","stringify","newTok","fetch","jsonTok","json","taken","token","module","hot","accept","Schedule","constructor","channel","stationID","getSchedule","curDate","Date","toISOString","today","substring","yesterDate","setDate","getDate","yesterday","tomDate","tomorrow","plusTwoDate","todayPlusTwo","plusThreeDate","todayPlusThree","stationData","date","scheduleOptions","headers","currToken","redirect","resSched","stationSchedule","todayArr","programs","tmwArr","plusTwoArr","plusThreeArr","fullArr","concat","todaySchedule","map","elem","id","programID","day","airDateTime","toLocaleDateString","undefined","weekday","month","time","toLocaleTimeString","hour","minute","todayIDs","data","options","res","todayTitles","series","titles","title120","episode","episodeTitle150","ssn","hasOwnProperty","metadata","Gracenote","season","epNum","Object","keys","forEach","key","existtodayTitles","find","document","querySelector","style","visibility","grid","getElementById","checkDate","i","length","markup","insertAdjacentHTML","popSched","detailMarkup","primetime","topPos","offsetTop","el","scrollTop","error","localStorage","getItem","alert","setItem","disc","ahc","apl","dam","dfc","idd","mtd","own","tlc","des","dsf","hgtv","cook","diy","food","trav","chanArr","then","result","e","catch","err","console","log"],"mappings":"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","file":"js.e491eee9.js","sourceRoot":"..","sourcesContent":["export const user = \"unclebillepg\";\nexport const password = \"526D1A95E3B6B19651774D1F90A68C32D758858F\";\n","import { user, password } from \"./creds.js\";\n\nasync function getTok() {\n  try {\n    const stuff = {\n      username: user,\n      password: password,\n    };\n\n    const getIT = {\n      method: \"POST\",\n      body: JSON.stringify(stuff),\n    };\n    const newTok = await fetch(\n      \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/token\",\n      getIT\n    );\n    const jsonTok = await newTok.json();\n    const taken = await jsonTok.token;\n    return taken;\n  } catch {}\n}\nexport default getTok();\n","import getTok from \"./tok.js\";\nif (module.hot) {\n  module.hot.accept();\n}\nexport default class Schedule {\n  constructor(channel, stationID) {\n    this.channel = channel;\n    this.stationID = stationID;\n  }\n\n  /** GET SCHEDULE */\n  async getSchedule() {\n    try {\n      /** DATES ***/\n      //TODAY//\n      const curDate = new Date().toISOString();\n      let today = curDate.substring(0, 10);\n\n      //YESTERDAY//\n      const yesterDate = new Date(curDate);\n      yesterDate.setDate(yesterDate.getDate() - 1);\n      let yesterday = yesterDate.toISOString();\n      yesterday = yesterday.substring(0, 10);\n\n      //TOMORROW//\n      const tomDate = new Date(curDate);\n      tomDate.setDate(tomDate.getDate() + 1);\n      let tomorrow = tomDate.toISOString();\n      tomorrow = tomorrow.substring(0, 10);\n\n      const plusTwoDate = new Date(curDate);\n      plusTwoDate.setDate(plusTwoDate.getDate() + 2);\n      let todayPlusTwo = plusTwoDate.toISOString();\n      todayPlusTwo = todayPlusTwo.substring(0, 10);\n\n      const plusThreeDate = new Date(curDate);\n      plusThreeDate.setDate(plusThreeDate.getDate() + 3);\n      let todayPlusThree = plusThreeDate.toISOString();\n      todayPlusThree = todayPlusThree.substring(0, 10);\n\n      //Station Data and Date to send to API\n      const stationData = [\n        {\n          stationID: `${this.stationID}`,\n          date: [today, tomorrow, todayPlusTwo, todayPlusThree],\n        },\n      ];\n\n      //options to include with API fetch\n      const scheduleOptions = {\n        method: \"POST\",\n        body: JSON.stringify(stationData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n\n      //Schedule fetch\n      const resSched = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/schedules\",\n        scheduleOptions\n      );\n      const stationSchedule = await resSched.json();\n      const todayArr = await stationSchedule[0].programs;\n      const tmwArr = await stationSchedule[1].programs;\n      const plusTwoArr = await stationSchedule[2].programs;\n      const plusThreeArr = await stationSchedule[3].programs;\n\n      //Combine each day to one array\n      const fullArr = todayArr.concat(tmwArr, plusTwoArr, plusThreeArr);\n\n      //Get program IDs and map to air times\n      const todaySchedule = await fullArr.map(function (elem) {\n        return {\n          id: elem.programID,\n          day: new Date(elem.airDateTime).toLocaleDateString(undefined, {\n            weekday: \"short\",\n            day: \"2-digit\",\n            month: \"2-digit\",\n            // year: 'numeric'\n          }),\n          time: new Date(elem.airDateTime).toLocaleTimeString(\"en-US\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n        };\n      });\n\n      /*** GET TITLES ***/\n      // Get program IDs and pass to new fetch to get Title info (Series, Ep, Season, Ep Num)\n      let todayIDs = await todaySchedule.map(function (id) {\n        return id[\"id\"];\n      });\n      let data = todayIDs;\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n      const res = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/programs\",\n        options\n      );\n\n      const jsonData = await res.json();\n\n      //Map Title to digestable array\n      const todayTitles = jsonData.map(function (elem) {\n        return {\n          id: elem.programID,\n          series: elem.titles[0].title120,\n          episode: elem.episodeTitle150\n            ? elem.episodeTitle150\n            : elem.titles[0].title120, // if no episode title just use series //\n          ssn:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Season ${elem.metadata[0].Gracenote.season}`\n              : `Season N/A`,\n          epNum:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Ep ${elem.metadata[0].Gracenote.episode}`\n              : `Ep N/A`,\n        };\n      });\n\n      /*** MATCH IDS ***/\n\n      // Combine Schedules (ID, Times) with Corresponding Titles based on same ID\n      Object.keys(todaySchedule).forEach((key) => {\n        let existtodayTitles = todayTitles.find(\n          ({ id }) => todaySchedule[key].id === id\n        );\n        if (existtodayTitles) {\n          (todaySchedule[key].series = existtodayTitles.series),\n            (todaySchedule[key].episode = existtodayTitles.episode),\n            (todaySchedule[key].ssn = existtodayTitles.ssn),\n            (todaySchedule[key].epNum = existtodayTitles.epNum);\n        }\n      });\n\n      /*** LOADER ***/\n\n      //Hide loader once schedules are ready\n      let loading = document.querySelector(`#${this.channel}--epg .spinner`);\n      loading.style.visibility = \"hidden\";\n\n      /*** RENDER SCHEDULE ***/\n\n      const grid = document.getElementById(`${this.channel}--epg`);\n      const checkDate = new Date().toLocaleDateString(undefined, {\n        weekday: \"short\",\n        day: \"2-digit\",\n        month: \"2-digit\",\n      });\n\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const markup = `  \n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"cell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p></div>                         `;\n\n        grid.insertAdjacentHTML(\"beforeend\", markup);\n      }\n      const popSched = document.getElementById(`${this.channel}--popup`);\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const detailMarkup = `\n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"big--${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"bigCell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p><p class=\"tmsid\">${todaySchedule[i].ssn} ${todaySchedule[i].epNum} - ${todaySchedule[i].id}</p></div> `;\n        popSched.insertAdjacentHTML(\"beforeend\", detailMarkup);\n      }\n      const primetime = document.getElementById(\n        `${this.channel}--${checkDate}--07:00 PM`\n      );\n      // Make grids align to 7:00PM of current day (8:00PM visually)\n      const topPos = primetime.offsetTop;\n      todaySchedule.forEach(\n        (el) =>\n          (document.getElementById(`${this.channel}--epg`).scrollTop =\n            topPos + 0)\n      );\n    } catch (error) {\n      let alerted = localStorage.getItem(\"alerted\") || \"\";\n      if (alerted != \"yes\") {\n        alert(\n          `We're having trouble retrieving schedules. If schedules fail to load, please try again later.`\n        );\n        localStorage.setItem(\"alerted\", \"yes\");\n      }\n    }\n  }\n}\n\n//** CHANNELS ***/\nconst disc = new Schedule(\"disc\", \"56905\");\nconst ahc = new Schedule(\"ahc\", \"18284\");\nconst apl = new Schedule(\"apl\", \"57394\");\nconst dam = new Schedule(\"dam\", \"60468\");\nconst dfc = new Schedule(\"dfc\", \"16618\");\nconst idd = new Schedule(\"idd\", \"16615\");\nconst mtd = new Schedule(\"mtd\", \"31046\");\nconst own = new Schedule(\"own\", \"70388\");\nconst tlc = new Schedule(\"tlc\", \"57391\");\nconst des = new Schedule(\"des\", \"19247\");\nconst dsf = new Schedule(\"dsf\", \"58428\");\nconst hgtv = new Schedule(\"hgtv\", \"49788\");\nconst cook = new Schedule(\"cook\", \"68065\");\nconst diy = new Schedule(\"diy\", \"67375\");\nconst food = new Schedule(\"food\", \"50747\");\nconst trav = new Schedule(\"trav\", \"59303\");\n\nlet chanArr = [\n  disc,\n  ahc,\n  apl,\n  dam,\n  dfc,\n  idd,\n  mtd,\n  own,\n  tlc,\n  des,\n  dsf,\n  hgtv,\n  cook,\n  diy,\n  food,\n  trav,\n];\n\n// Get token, test, fetch schedules\nlet currToken = getTok\n  .then((result) => {\n    currToken = result;\n    if (currToken !== undefined) {\n      chanArr.forEach(function (e) {\n        e.getSchedule();\n      });\n    } else {\n      alert(`Unable to retrieve schedules. Please try again later.`);\n    }\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n// import { showPopup, hidePopup } from \"./bigGrid.js\";\n"]}