{"version":3,"sources":["src/js/creds.js","src/js/tok.js","src/js/index.js"],"names":["user","password","getTok","fetch","stuff","username","getIT","method","body","JSON","stringify","newTok","json","jsonTok","token","taken","module","hot","accept","Schedule","channel","stationID","currToken","curDate","Date","toISOString","today","substring","yesterDate","setDate","getDate","tomDate","tomorrow","plusTwoDate","todayPlusTwo","plusThreeDate","todayPlusThree","stationData","date","scheduleOptions","headers","redirect","resSched","stationSchedule","programs","todayArr","tmwArr","plusTwoArr","fullArr","plusThreeArr","concat","map","elem","id","programID","day","airDateTime","toLocaleDateString","undefined","weekday","month","time","toLocaleTimeString","hour","minute","todaySchedule","todayIDs","data","options","res","i","jsonData","todayTitles","series","titles","title120","episode","episodeTitle150","ssn","hasOwnProperty","metadata","Gracenote","season","epNum","Object","keys","forEach","key","existtodayTitles","find","document","querySelector","style","visibility","grid","getElementById","checkDate","length","markup","insertAdjacentHTML","popSched","detailMarkup","primetime","topPos","offsetTop","console","log","el","scrollTop","localStorage","getItem","alert","setItem","disc","ahc","apl","dam","dfc","idd","mtd","own","tlc","des","dsf","hgtv","cook","diy","food","trav","chanArr","then","result","e","getSchedule","catch","err"],"mappings":"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","file":"js.052000c3.js","sourceRoot":"..","sourcesContent":["export const user = \"unclebillepg\";\nexport const password = \"526D1A95E3B6B19651774D1F90A68C32D758858F\";\n","import { user, password } from \"./creds.js\";\n\nasync function getTok() {\n  try {\n    const stuff = {\n      username: user,\n      password: password,\n    };\n\n    const getIT = {\n      method: \"POST\",\n      body: JSON.stringify(stuff),\n    };\n    const newTok = await fetch(\n      \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/token\",\n      getIT\n    );\n    const jsonTok = await newTok.json();\n    const taken = await jsonTok.token;\n    return taken;\n  } catch {}\n}\nexport default getTok();\n","import getTok from \"./tok.js\";\nif (module.hot) {\n  module.hot.accept();\n}\nexport default class Schedule {\n  constructor(channel, stationID) {\n    this.channel = channel;\n    this.stationID = stationID;\n  }\n\n  /** GET SCHEDULE */\n  async getSchedule() {\n    try {\n      /** DATES ***/\n      //TODAY//\n      const curDate = new Date().toISOString();\n      let today = curDate.substring(0, 10);\n\n      //YESTERDAY//\n      const yesterDate = new Date(curDate);\n      yesterDate.setDate(yesterDate.getDate() - 1);\n      let yesterday = yesterDate.toISOString();\n      yesterday = yesterday.substring(0, 10);\n\n      //TOMORROW//\n      const tomDate = new Date(curDate);\n      tomDate.setDate(tomDate.getDate() + 1);\n      let tomorrow = tomDate.toISOString();\n      tomorrow = tomorrow.substring(0, 10);\n\n      const plusTwoDate = new Date(curDate);\n      plusTwoDate.setDate(plusTwoDate.getDate() + 2);\n      let todayPlusTwo = plusTwoDate.toISOString();\n      todayPlusTwo = todayPlusTwo.substring(0, 10);\n\n      const plusThreeDate = new Date(curDate);\n      plusThreeDate.setDate(plusThreeDate.getDate() + 3);\n      let todayPlusThree = plusThreeDate.toISOString();\n      todayPlusThree = todayPlusThree.substring(0, 10);\n\n      //Station Data and Date to send to API\n      const stationData = [\n        {\n          stationID: `${this.stationID}`,\n          date: [today, tomorrow, todayPlusTwo, todayPlusThree],\n        },\n      ];\n\n      //options to include with API fetch\n      const scheduleOptions = {\n        method: \"POST\",\n        body: JSON.stringify(stationData),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n\n      //Schedule fetch\n      const resSched = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/schedules\",\n        scheduleOptions\n      );\n      const stationSchedule = await resSched.json();\n      const todayArr = await stationSchedule[0].programs;\n      const tmwArr = await stationSchedule[1].programs;\n      const plusTwoArr = await stationSchedule[2].programs;\n      const plusThreeArr = await stationSchedule[3].programs;\n\n      //Combine each day to one array\n      const fullArr = todayArr.concat(tmwArr, plusTwoArr, plusThreeArr);\n\n      //Get program IDs and map to air times\n      const todaySchedule = await fullArr.map(function (elem) {\n        return {\n          id: elem.programID,\n          day: new Date(elem.airDateTime).toLocaleDateString(undefined, {\n            weekday: \"short\",\n            day: \"2-digit\",\n            month: \"2-digit\",\n            // year: 'numeric'\n          }),\n          time: new Date(elem.airDateTime).toLocaleTimeString(\"en-US\", {\n            hour: \"2-digit\",\n            minute: \"2-digit\",\n          }),\n        };\n      });\n\n      /*** GET TITLES ***/\n      // Get program IDs and pass to new fetch to get Title info (Series, Ep, Season, Ep Num)\n      let todayIDs = await todaySchedule.map(function (id) {\n        return id[\"id\"];\n      });\n      let data = todayIDs;\n      const options = {\n        method: \"POST\",\n        body: JSON.stringify(data),\n        headers: {\n          \"Content-Type\": \"application/json\",\n          token: await currToken,\n        },\n        redirect: \"follow\",\n      };\n      const res = await fetch(\n        \"https://cors-anywhere.herokuapp.com/https://json.schedulesdirect.org/20141201/programs\",\n        options\n      );\n\n      const jsonData = await res.json();\n\n      //Map Title to digestable array\n      const todayTitles = jsonData.map(function (elem) {\n        return {\n          id: elem.programID,\n          series: elem.titles[0].title120,\n          episode: elem.episodeTitle150\n            ? elem.episodeTitle150\n            : elem.titles[0].title120, // if no episode title just use series //\n          ssn:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Season ${elem.metadata[0].Gracenote.season}`\n              : `Season N/A`,\n          epNum:\n            elem.hasOwnProperty(\"metadata\") &&\n            elem.metadata[0].hasOwnProperty(\"Gracenote\")\n              ? `Ep ${elem.metadata[0].Gracenote.episode}`\n              : `Ep N/A`,\n        };\n      });\n\n      /*** MATCH IDS ***/\n\n      // Combine Schedules (ID, Times) with Corresponding Titles based on same ID\n      Object.keys(todaySchedule).forEach((key) => {\n        let existtodayTitles = todayTitles.find(\n          ({ id }) => todaySchedule[key].id === id\n        );\n        if (existtodayTitles) {\n          (todaySchedule[key].series = existtodayTitles.series),\n            (todaySchedule[key].episode = existtodayTitles.episode),\n            (todaySchedule[key].ssn = existtodayTitles.ssn),\n            (todaySchedule[key].epNum = existtodayTitles.epNum);\n        }\n      });\n\n      /*** LOADER ***/\n\n      //Hide loader once schedules are ready\n      let loading = document.querySelector(`#${this.channel}--epg .spinner`);\n      loading.style.visibility = \"hidden\";\n\n      /*** RENDER SCHEDULE ***/\n\n      const grid = document.getElementById(`${this.channel}--epg`);\n      const checkDate = new Date().toLocaleDateString(undefined, {\n        weekday: \"short\",\n        day: \"2-digit\",\n        month: \"2-digit\",\n      });\n\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const markup = `  \n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"cell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p></div>                         `;\n\n        grid.insertAdjacentHTML(\"beforeend\", markup);\n      }\n      const popSched = document.getElementById(`${this.channel}--popup`);\n      for (var i = 0; i < todaySchedule.length; i++) {\n        const detailMarkup = `\n                        <div class=\"cell time\"><p>${todaySchedule[i].time}</p>\n                        <p class=\"date\" id=\"big--${this.channel}--${todaySchedule[i].day}--${todaySchedule[i].time}\">${todaySchedule[i].day}</p></div>\n                        <div class=\"bigCell title\"><p class=\"series\">${todaySchedule[i].series}</p>\n                        <p class=\"episode\">${todaySchedule[i].episode}</p><p class=\"tmsid\">${todaySchedule[i].ssn} ${todaySchedule[i].epNum} - ${todaySchedule[i].id}</p></div> `;\n        popSched.insertAdjacentHTML(\"beforeend\", detailMarkup);\n      }\n      const primetime = document.getElementById(\n        `${this.channel}--${checkDate}--07:00 PM`\n      );\n      // Make grids align to 7:00PM of current day (8:00PM visually)\n      const topPos = primetime.offsetTop;\n      console.log(primetime, topPos);\n\n      todaySchedule.forEach(\n        (el) =>\n          (document.getElementById(`${this.channel}--epg`).scrollTop =\n            topPos + 18)\n      );\n    } catch (error) {\n      let alerted = localStorage.getItem(\"alerted\") || \"\";\n      if (alerted != \"yes\") {\n        alert(\n          `We're having trouble retrieving schedules. If schedules fail to load, please try again later.`\n        );\n        localStorage.setItem(\"alerted\", \"yes\");\n      }\n    }\n  }\n}\n\n//** CHANNELS ***/\nconst disc = new Schedule(\"disc\", \"56905\");\nconst ahc = new Schedule(\"ahc\", \"18284\");\nconst apl = new Schedule(\"apl\", \"57394\");\nconst dam = new Schedule(\"dam\", \"60468\");\nconst dfc = new Schedule(\"dfc\", \"16618\");\nconst idd = new Schedule(\"idd\", \"16615\");\nconst mtd = new Schedule(\"mtd\", \"31046\");\nconst own = new Schedule(\"own\", \"70388\");\nconst tlc = new Schedule(\"tlc\", \"57391\");\nconst des = new Schedule(\"des\", \"19247\");\nconst dsf = new Schedule(\"dsf\", \"58428\");\nconst hgtv = new Schedule(\"hgtv\", \"49788\");\nconst cook = new Schedule(\"cook\", \"68065\");\nconst diy = new Schedule(\"diy\", \"67375\");\nconst food = new Schedule(\"food\", \"50747\");\nconst trav = new Schedule(\"trav\", \"59303\");\n\nlet chanArr = [\n  disc,\n  ahc,\n  apl,\n  dam,\n  dfc,\n  idd,\n  mtd,\n  own,\n  tlc,\n  des,\n  dsf,\n  hgtv,\n  cook,\n  diy,\n  food,\n  trav,\n];\n\n// Get token, test, fetch schedules\nlet currToken = getTok\n  .then((result) => {\n    currToken = result;\n    if (currToken !== undefined) {\n      chanArr.forEach(function (e) {\n        e.getSchedule();\n      });\n    } else {\n      alert(`Unable to retrieve schedules. Please try again later.`);\n    }\n  })\n  .catch((err) => {\n    console.log(err);\n  });\n\n// import { showPopup, hidePopup } from \"./bigGrid.js\";\n"]}